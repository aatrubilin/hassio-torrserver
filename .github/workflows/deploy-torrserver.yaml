---
name: build-torrserver

on: [push, pull_request]
#  release:
#    types: [published]

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      architectures: ${{ steps.information.outputs.architectures }}
      base_image_signer: ${{ steps.information.outputs.codenotary_base_image }}
      build: ${{ steps.information.outputs.build }}
      description: ${{ steps.information.outputs.description }}
      environment: ${{ steps.release.outputs.environment }}
      name: ${{ steps.information.outputs.name }}
      signer: ${{ steps.information.outputs.codenotary_signer }}
      slug: ${{ steps.override.outputs.slug }}
      target: ${{ steps.information.outputs.target }}
      version: ${{ steps.release.outputs.version }}
    steps:
      - name: ‚§µÔ∏è Checkout
        uses: actions/checkout@v3.3.0

      - name: üèó Prepare envs
        working-directory: ./torrserver
        run: |
          VERSION=$(grep '^version: \w' config.yaml | sed 's/^.*: //')
          echo "VERSION=${VERSION}" >> ${GITHUB_ENV}
          echo "VERSION_ADDON=$(echo $VERSION | cut -d "-" -f 1)" >> ${GITHUB_ENV}
          echo "VERSION_TS=$(echo $VERSION | cut -d "-" -f 2)" >> ${GITHUB_ENV}
          echo "VERSION_META=$(echo $VERSION | cut -d "-" -f 3)" >> ${GITHUB_ENV}
          echo "REPO=${GITHUB_REPOSITORY}" >> ${GITHUB_ENV}
          echo "Version: ${VERSION}"
          echo "Repo: ${GITHUB_REPOSITORY}"

      - name: üöÄ Run add-on information action
        id: information
        uses: frenck/action-addon-information@v1.4.2

      - name: üöÄ Process possible slug override
        id: override
        run: |
          slug="${{ steps.information.outputs.slug }}"
          if [[ ! -z "${{ inputs.slug }}" ]]; then
            slug="${{ inputs.slug }}"
          fi
          echo "slug=$slug" >> "$GITHUB_OUTPUT"

      - name: ‚ÑπÔ∏è Gather version and environment
        id: release
        run: |
          sha="${{ github.sha }}"
          environment="edge"
          version="${sha:0:7}"
          if [[ "${{ github.event_name }}" = "release" ]]; then
            version="${{ github.event.release.tag_name }}"
            version="${version,,}"
            version="${version#v}"
            environment="stable"
            if [[ "${{ github.event.release.prerelease }}" = "true" ]]; then
              environment="beta"
            fi
          fi

          echo "environment=${environment}" >> "$GITHUB_OUTPUT"
          echo "version=${version}" >> "$GITHUB_OUTPUT"
      - name: üèó Prepare source
        working-directory: ./torrserver/.build
        run: |
          rm -rf src
          echo "Clone TorrServer-${VERSION_TS}"
          git clone --depth 1 --branch $VERSION_TS https://github.com/YouROK/TorrServer.git src
          echo "Set relative path for staticfiles"
          jq -c '. + { "homepage": "./" }' ./src/web/package.json --indent 2 > ./src/web/package.$$.json
          mv ./src/web/package.$$.json ./src/web/package.json

      - name: üíæ Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: src
          path: ./torrserver/.build

  deploy:
    runs-on: ubuntu-latest
    needs:
      - prepare
    strategy:
      matrix:
        architecture: ${{ fromJson(needs.information.outputs.architectures) }}
    steps:
      - name: ‚§µÔ∏è Checkout
        uses: actions/checkout@v3.3.0

      - name: ‚ÑπÔ∏è Compose build flags
        id: flags
        run: |
          echo "date=$(date +"%Y-%m-%dT%H:%M:%SZ")" >> "$GITHUB_OUTPUT"
          from=$(yq --no-colors eval ".build_from.${{ matrix.architecture }}" "${{ needs.information.outputs.build }}")
          echo "from=${from}" >> "$GITHUB_OUTPUT"
          if [[ "${{ matrix.architecture}}" = "amd64" ]]; then
            echo "platform=linux/amd64" >> "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.architecture }}" = "i386" ]]; then
            echo "platform=linux/386" >> "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.architecture }}" = "armhf" ]]; then
            echo "platform=linux/arm/v6" >> "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.architecture }}" = "armv7" ]]; then
            echo "platform=linux/arm/v7" >> "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.architecture }}" = "aarch64" ]]; then
            echo "platform=linux/arm64/v8" >> "$GITHUB_OUTPUT"
          else
            echo "::error ::Could not determine platform for architecture ${{ matrix.architecture }}"
            exit 1
          fi

      - name: üåè Download artifact
        uses: actions/download-artifact@v4
        with:
          name: src

      - name: üìù Set up build cache
        id: cache
        uses: actions/cache@v4
        with:
          path: /tmp/.docker-cache
          key: docker-${{ matrix.architecture }}-${{ github.sha }}
          restore-keys: |
            docker-${{ matrix.architecture }}

      - name: üèó Set up QEMU
        uses: docker/setup-qemu-action@v2.1.0

      - name: üèó Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.2.1

      - name: üèó Login to GitHub Container Registry
        uses: docker/login-action@v2.1.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üöÄ Build and push
        uses: docker/build-push-action@v3.3.0
        with:
          load: true
          context: ./torrserver/.build
          cache-from: |
            type=local,src=/tmp/.docker-cache
            ghcr.io/${{ env.REPO }}:latest
          cache-to: type=local,mode=max,dest=/tmp/.docker-cache-new
          platforms: ${{ steps.flags.outputs.platform }}
          push: true
          tags: |
            ghcr.io/${{ env.REPO }}:${{ env.VERSION }}-${{ steps.flags.outputs.platform }}
          build-args: |
            BUILD_ARCH=${{ matrix.architecture }}
            BUILD_DATE=${{ steps.flags.outputs.date }}
            BUILD_DESCRIPTION=${{ needs.information.outputs.description }}
            BUILD_FROM=${{ steps.flags.outputs.from }}
            BUILD_NAME=${{ needs.information.outputs.name }}
            BUILD_REF=${{ github.sha }}
            BUILD_REPOSITORY=${{ github.repository }}
            BUILD_VERSION=${{ needs.information.outputs.version }}
      # This ugly bit is necessary, or our cache will grow forever...
      # Well until we hit GitHub's limit of 5GB :)
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: üöö Swap build cache
        run: |
          rm -rf /tmp/.docker-cache
          mv /tmp/.docker-cache-new /tmp/.docker-cache
